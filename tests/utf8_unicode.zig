const std = @import("std");
const Regex = @import("regex").Regex;

// UTF-8 and Unicode Tests

test "UTF-8: literal matching" {
    const allocator = std.testing.allocator;
    var regex = try Regex.compile(allocator, "caf√©");
    defer regex.deinit();

    try std.testing.expect(try regex.isMatch("caf√©"));
    try std.testing.expect(!try regex.isMatch("cafe"));
}

test "UTF-8: emoji matching" {
    const allocator = std.testing.allocator;
    var regex = try Regex.compile(allocator, "Hello üëã World");
    defer regex.deinit();

    try std.testing.expect(try regex.isMatch("Hello üëã World"));
}

test "UTF-8: Chinese characters" {
    const allocator = std.testing.allocator;
    var regex = try Regex.compile(allocator, "‰Ω†Â•Ω");
    defer regex.deinit();

    try std.testing.expect(try regex.isMatch("‰Ω†Â•Ω"));
    try std.testing.expect(try regex.isMatch("‰Ω†Â•Ω‰∏ñÁïå"));
}

test "UTF-8: mixed ASCII and Unicode" {
    const allocator = std.testing.allocator;
    var regex = try Regex.compile(allocator, "test-—Ç–µ—Å—Ç-„ÉÜ„Çπ„Éà");
    defer regex.deinit();

    try std.testing.expect(try regex.isMatch("test-—Ç–µ—Å—Ç-„ÉÜ„Çπ„Éà"));
}

test "UTF-8: dot matches multi-byte character" {
    const allocator = std.testing.allocator;
    var regex = try Regex.compile(allocator, "c.f√©");
    defer regex.deinit();

    // Currently .  matches one byte, not one character
    // This test documents current behavior
    try std.testing.expect(try regex.isMatch("caf√©"));
}

test "UTF-8: alternation with Unicode" {
    const allocator = std.testing.allocator;
    var regex = try Regex.compile(allocator, "hello|‰Ω†Â•Ω|„Åì„Çì„Å´„Å°„ÅØ");
    defer regex.deinit();

    try std.testing.expect(try regex.isMatch("hello"));
    try std.testing.expect(try regex.isMatch("‰Ω†Â•Ω"));
    try std.testing.expect(try regex.isMatch("„Åì„Çì„Å´„Å°„ÅØ"));
}

test "UTF-8: character class range with multi-byte" {
    const allocator = std.testing.allocator;
    // Character classes currently only work with single-byte ASCII
    var regex = try Regex.compile(allocator, "[a-z]+");
    defer regex.deinit();

    try std.testing.expect(try regex.isMatch("hello"));
    // Multi-byte UTF-8 (√©) won't match [a-z], but "caf" will
    const result = try regex.find("caf√©");
    try std.testing.expect(result != null);
    if (result) |match| {
        defer {
            var mut_match = match;
            mut_match.deinit(allocator);
        }
        // Only matches ASCII part "caf", not the √©
        try std.testing.expectEqualStrings("caf", match.slice);
    }
}

test "UTF-8: quantifiers with Unicode literals" {
    const allocator = std.testing.allocator;
    var regex = try Regex.compile(allocator, "„ÅÇ+");
    defer regex.deinit();

    try std.testing.expect(try regex.isMatch("„ÅÇ"));
    try std.testing.expect(try regex.isMatch("„ÅÇ„ÅÇ„ÅÇ„ÅÇ"));
}

test "UTF-8: capture groups with Unicode" {
    const allocator = std.testing.allocator;
    var regex = try Regex.compile(allocator, "(‰Ω†Â•Ω)(‰∏ñÁïå)");
    defer regex.deinit();

    const result = try regex.find("‰Ω†Â•Ω‰∏ñÁïå");
    try std.testing.expect(result != null);
    if (result) |match| {
        defer {
            var mut_match = match;
            mut_match.deinit(allocator);
        }
        try std.testing.expectEqual(@as(usize, 2), match.captures.len);
        try std.testing.expectEqualStrings("‰Ω†Â•Ω", match.captures[0]);
        try std.testing.expectEqualStrings("‰∏ñÁïå", match.captures[1]);
    }
}

test "UTF-8: replacement with Unicode" {
    const allocator = std.testing.allocator;
    var regex = try Regex.compile(allocator, "(\\w+)@(\\w+)");
    defer regex.deinit();

    // ASCII works
    const result1 = try regex.replace(allocator, "user@example", "$1 at $2");
    defer allocator.free(result1);
    try std.testing.expectEqualStrings("user at example", result1);
}

test "UTF-8: anchors with Unicode" {
    const allocator = std.testing.allocator;
    var regex = try Regex.compile(allocator, "^‰Ω†Â•Ω$");
    defer regex.deinit();

    try std.testing.expect(try regex.isMatch("‰Ω†Â•Ω"));
    try std.testing.expect(!try regex.isMatch("‰Ω†Â•Ω‰∏ñÁïå"));
    try std.testing.expect(!try regex.isMatch("‰∏ñÁïå‰Ω†Â•Ω"));
}

test "UTF-8: non-capturing groups with Unicode" {
    const allocator = std.testing.allocator;
    var regex = try Regex.compile(allocator, "(?:ÏïàÎÖï|hello) (world|ÏÑ∏Í≥Ñ)");
    defer regex.deinit();

    const result1 = try regex.find("hello world");
    try std.testing.expect(result1 != null);
    if (result1) |match| {
        defer {
            var mut_match = match;
            mut_match.deinit(allocator);
        }
        try std.testing.expectEqual(@as(usize, 1), match.captures.len);
        try std.testing.expectEqualStrings("world", match.captures[0]);
    }

    const result2 = try regex.find("ÏïàÎÖï ÏÑ∏Í≥Ñ");
    try std.testing.expect(result2 != null);
    if (result2) |match| {
        defer {
            var mut_match = match;
            mut_match.deinit(allocator);
        }
        try std.testing.expectEqual(@as(usize, 1), match.captures.len);
        try std.testing.expectEqualStrings("ÏÑ∏Í≥Ñ", match.captures[0]);
    }
}

// Document current limitations
test "UTF-8: known limitation - dot is byte-based" {
    const allocator = std.testing.allocator;
    var regex = try Regex.compile(allocator, "^.$");
    defer regex.deinit();

    // Single ASCII character
    try std.testing.expect(try regex.isMatch("a"));

    // Multi-byte character - currently fails because . matches one byte
    // In Unicode mode, . should match the entire character
    try std.testing.expect(!try regex.isMatch("√©")); // √© is 2 bytes
    try std.testing.expect(!try regex.isMatch("‰Ω†")); // ‰Ω† is 3 bytes
}

test "UTF-8: known limitation - \\w is ASCII-only" {
    const allocator = std.testing.allocator;
    var regex = try Regex.compile(allocator, "\\w+");
    defer regex.deinit();

    // ASCII word characters work
    try std.testing.expect(try regex.isMatch("hello"));
    try std.testing.expect(try regex.isMatch("test123"));

    // Non-ASCII letters currently don't match \w
    // In Unicode mode, \w should match Unicode letters
    const result = try regex.find("caf√©");
    if (result) |match| {
        defer {
            var mut_match = match;
            mut_match.deinit(allocator);
        }
        // Currently only matches "caf", not "caf√©"
        try std.testing.expectEqualStrings("caf", match.slice);
    }
}
